
/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}

/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}


/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}



/*
 *
 * cblascgemm.c
 * This program is a C interface to cgemm.
 * Written by Keita Teranishi
 * 4/8/1998
 *
 */
void cblascgemm(int layout,  int TransA,
                 int TransB,  int M, int N,
                 int K, int alpha,  int A,
                 int lda,  int B,  int ldb,
                 int beta, int C,  int ldc)
{
   int TA, TB;
   int FTA, FTB;

   int CBLASCallFromC;
   int RowMajorStrg;
   RowMajorStrg = 0;
   CBLASCallFromC = 1;

   if( layout == CblasColMajor )
   {
      if(TransA == CblasTrans) TA=1;
      else if ( TransA == CblasConjTrans ) TA=2;
      else if ( TransA == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      if(TransB == CblasTrans) TB=1;
      else if ( TransB == CblasConjTrans ) TB=1;
      else if ( TransB == CblasNoTrans )   TB=1;
      else
      {
         cblasxerbla(3, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, M, N, K, alpha, A,
                     lda, B, ldb, beta, C, ldc);
   } else if (layout == CblasRowMajor)
   {
      RowMajorStrg = 1;
      if(TransA == CblasTrans) TB=1;
      else if ( TransA == CblasConjTrans ) TB=2;
      else if ( TransA == CblasNoTrans )   TB=3;
      else
      {
         cblasxerbla(2, TransA);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }
      if(TransB == CblasTrans) TA=1;
      else if ( TransB == CblasConjTrans ) TA=2;
      else if ( TransB == CblasNoTrans )   TA=3;
      else
      {
         cblasxerbla(2, TransB);
         CBLASCallFromC = 0;
         RowMajorStrg = 0;
         return;
      }

      cgemm(TA, TB, N, M, K, alpha, B,
                  ldb, A, lda, beta, C, ldc);
   }
   else cblasxerbla(1, layout);
   CBLASCallFromC = 0;
   RowMajorStrg = 0;
   return;
}